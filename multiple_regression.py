# -*- coding: utf-8 -*-
"""Multiple Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPWhS2AGBHXLk1Lw1MfmrS2V_ijKZAkn
"""

# Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso

#importing Data
df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/00374/energydata_complete.csv')

#droping two columns 
df1 = df.drop(columns=['date', 'lights'])

df1

#normalizing the dataframe
scaler = MinMaxScaler()
normalized_df = pd.DataFrame(scaler.fit_transform(df1), columns=df1.columns)

#spliting data frame into Features_df and Heating_target_df
appliances_df = normalized_df['Appliances']
features_df = normalized_df.drop(columns=['Appliances'])

#using the train_test_split to disect into training and test set
x_train, x_test, y_train, y_test = train_test_split(features_df, appliances_df, test_size=0.3, random_state = 42)

#fiting a Linear Regression
linear_model = LinearRegression()
linear_model.fit(x_train,y_train)

#predicting with the test data
predicted_values = linear_model.predict(x_test)

#Estimating errors

#mean Absolute Error
mae = mean_absolute_error(y_test, predicted_values)
print(round(mae, 3))

#Residual Sum of Square Error
rss = np.sum(np.square(y_test, predicted_values))
print (round(rss, 3))

#root Mean Squared Error
round(np.sqrt(mean_squared_error(y_test, predicted_values)), 3)

#R-squared 
r2_scored = r2_score(y_test, predicted_values)
print(r2_scored, 3)

#Ridge 
ridge_reg = Ridge(alpha=0.5)
ridge_reg.fit(x_train,y_train)

#Lasso 
lasso_reg = Lasso(alpha=0.001)
lasso_reg.fit(x_train, y_train)

#creating a function that takes in a model works on its weight and print it out into a Series
def get_weights_df(model, feat, col_name):
  weights = pd.Series(model.coef_, feat.columns).sort_values()
  weights_df = pd.DataFrame(weights).reset_index()
  weights_df.columns=['Features', col_name]
  weights_df[col_name].round(3)
  return weights_df

linear_model_weights = get_weights_df(linear_model, x_train, 'Linear_Model_Weight')
ridge_weight_df =get_weights_df(ridge_reg, x_train, 'ridge_weight')
lasso_weight_df = get_weights_df(lasso_reg, x_train, 'Lasso_weight')

final_weight = pd.merge(linear_model_weights, ridge_weight_df, on = 'Features')
final_weight = pd.merge(final_weight, lasso_weight_df, on = 'Features')

final_weight

lm = LinearRegression()
T2 = x_train.drop(columns=['T1','RH_1','RH_2','T3', 'RH_3', 'T4', 'RH_4','T5', 'RH_5', 'T6', 'RH_6', 'T7', 'RH_7', 'T8', 'RH_8', 'T9', 'RH_9', 'T_out','Press_mm_hg',	'RH_out',	'Windspeed',	'Visibility',	'Tdewpoint',	'rv1',	'rv2'])
T6 = x_train.drop(columns=['T1','RH_1','RH_2','T3', 'RH_3', 'T4', 'RH_4','T5', 'RH_5', 'T2', 'RH_6', 'T7', 'RH_7', 'T8', 'RH_8', 'T9', 'RH_9', 'T_out','Press_mm_hg',	'RH_out',	'Windspeed',	'Visibility',	'Tdewpoint',	'rv1',	'rv2'])
lm.fit(T2, T6)

T2test = x_test.drop(columns=['T1','RH_1','RH_2','T3', 'RH_3', 'T4', 'RH_4','T5', 'RH_5', 'T6', 'RH_6', 'T7', 'RH_7', 'T8', 'RH_8', 'T9', 'RH_9', 'T_out','Press_mm_hg',	'RH_out',	'Windspeed',	'Visibility',	'Tdewpoint',	'rv1',	'rv2'])
T6test = x_test.drop(columns=['T1','RH_1','RH_2','T3', 'RH_3', 'T4', 'RH_4','T5', 'RH_5', 'T2', 'RH_6', 'T7', 'RH_7', 'T8', 'RH_8', 'T9', 'RH_9', 'T_out','Press_mm_hg',	'RH_out',	'Windspeed',	'Visibility',	'Tdewpoint',	'rv1',	'rv2'])

predicted_values = lm.predict(T2test)

#R-squared 
r2_scored = r2_score(T6test, predicted_values)
print(round(r2_scored, 2))

#mean Absolute Error
mae = mean_absolute_error(T6test, predicted_values)
print(round(mae, 2))

#Residual Sum of Square Error
rss = np.sum(np.square(T6test - predicted_values))
print(round(rss, 2))

#root Mean Squared Error
round(np.sqrt(mean_squared_error(T6test, predicted_values)), 3)

#Ridge 
ridge_reg2 = Ridge(alpha=0.4)
ridge_reg2.fit(x_train,y_train)

lasso_reg2 = Lasso(alpha=0.001)
lasso_reg2.fit(x_train, y_train)
lasoPredict = lasso_reg2.predict(x_test)
round(np.sqrt(mean_squared_error(y_test, lasoPredict)), 3)

lasso_weight_df2 = get_weights_df(lasso_reg2, x_train, 'Lasso_weight')
lasso_weight_df

